{"version":3,"sources":["useFetch.js"],"names":["useFetch","isObject","obj","Object","prototype","toString","call","arg1","arg2","url","options","onMount","baseUrl","method","handleOptions","opts","timeout","rest","data","setData","loading","setLoading","error","setError","fetchData","fArg1","fArg2","query","fetchOptions","toLowerCase","body","JSON","stringify","response","fetch","json","err","text","get","post","patch","put","del","request","delete","assign"],"mappings":"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","file":"useFetch.js","sourceRoot":"../src","sourcesContent":["import 'babel-polyfill' // so async await works ;)\nimport { useEffect, useState, useCallback } from 'react'\n\nconst isObject = obj => obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]'\n\nexport function useFetch(arg1, arg2) {\n  let url = null\n  let options = {}\n  let onMount = false\n  let baseUrl = ''\n  let method = 'GET'\n\n  const handleOptions = opts => {\n    if (true) {\n      // take out all the things that are not normal `fetch` options\n      // need to take this out of scope so can set the variables below correctly\n      let { url, onMount, timeout, baseUrl, ...rest } = opts\n      options = rest\n    }\n    if (opts.url) url = opts.url\n    if (opts.onMount) onMount = opts.onMount\n    if (opts.method) method = opts.method\n    if (opts.baseUrl) baseUrl = opts.baseUrl\n  }\n\n  if (typeof arg1 === 'string') {\n    url = arg1\n    if (isObject(arg2)) handleOptions(arg2)\n  } else if (isObject(arg1)) {\n    handleOptions(arg1)\n  }\n\n  const [data, setData] = useState(null)\n  const [loading, setLoading] = useState(onMount)\n  const [error, setError] = useState(null)\n\n  const fetchData = useCallback(\n    method => async (fArg1, fArg2) => {\n      let query = ''\n      const fetchOptions = {}\n      if (isObject(fArg1) && method.toLowerCase() !== 'get') {\n        fetchOptions.body = JSON.stringify(fArg1)\n      } else if (baseUrl && typeof fArg1 === 'string') {\n        url = baseUrl + fArg1\n        if (isObject(fArg2)) fetchOptions.body = JSON.stringify(fArg2)\n      }\n      if (typeof fArg1 === 'string' && typeof fArg2 === 'string') query = fArg2\n\n      try {\n        setLoading(true)\n        const response = await fetch(url + query, {\n          method,\n          ...options,\n          ...fetchOptions\n        })\n        let data = null\n        try {\n          data = await response.json()\n        } catch (err) {\n          try {\n            data = await response.text()\n          } catch (err) {\n            setError(`Currently only supports JSON and Text response types: ${err}`)\n          }\n        }\n        setData(data)\n        setLoading(false)\n      } catch (err) {\n        setError(err)\n      }\n    },\n    [url]\n  )\n\n  const get = useCallback(fetchData('GET'))\n  const post = useCallback(fetchData('POST'))\n  const patch = useCallback(fetchData('PATCH'))\n  const put = useCallback(fetchData('PUT'))\n  const del = useCallback(fetchData('DELETE'))\n\n  const request = { get, post, patch, put, del, delete: del }\n\n  useEffect(() => {\n    if (onMount) request[method.toLowerCase()]()\n  }, [])\n\n  return Object.assign([data, loading, error, request], { data, loading, error, request, ...request })\n}\n\nexport default useFetch\n"]}